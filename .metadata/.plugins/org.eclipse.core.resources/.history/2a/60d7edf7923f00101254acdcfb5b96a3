//*****************************************************************************
//
// main.c  – CC3200: Create a CSV file on microSD using FatFs + SDHost
//
// This example mounts the SD card via the SDHost interface (diskio.c),
// creates (or overwrites) “DATA.CSV” in the card’s root directory, writes
// several rows of comma-separated values using f_printf(), then closes the file.
//
// Assumes the following files are present in the project and on the include path:
//   • ff.c, ff.h, ffconf.h       (FatFs R0.10c source & config)
//   • diskio.c, diskio.h        (SDHost - FatFs glue)
//   • pinmux.c, pinmux.h        (pin mux setup for SDHost)
//   • uart_if.c, uart_if.h      (UART initialization + debug print wrappers)
//   • gpio_if.c, gpio_if.h      (LED setup, optional debug LEDs)
//
// Ensure ffconf.h has _USE_STRFUNC set to 1 so that f_printf() is enabled.
//*****************************************************************************

#include <stdint.h>
#include <stdbool.h>
#include <string.h>

// TI Driverlib includes
#include "hw_types.h"
#include "hw_memmap.h"
#include "hw_ints.h"
#include "hw_common_reg.h"
#include "prcm.h"
#include "rom_map.h"
#include "utils.h"
#include "interrupt.h"

// Board-support includes
#include "pinmux.h"     // PinMuxConfig()
#include "uart_if.h"    // InitTerm(), ClearTerm(), Message(), Report()
#include "gpio_if.h"    // GPIO_IF_LedConfigure(), GPIO_IF_LedOff()

// FatFs includes
#include "ff.h"
#include "diskio.h"

#define APPLICATION_NAME    "CC3200 CSV Writer"
#define APPLICATION_VERSION "1.0.0"

//*****************************************************************************

void
BoardInit(void)
{
#ifndef USE_TIRTOS
    #if defined(ccs)
        MAP_IntVTableBaseSet((unsigned long)&g_pfnVectors[0]);
    #endif
    #if defined(ewarm)
        MAP_IntVTableBaseSet((unsigned long)&__vector_table);
    #endif
#endif
    MAP_IntMasterEnable();
    MAP_IntEnable(FAULT_SYSTICK);
    PRCMCC3200MCUInit();
}

//*****************************************************************************

int
main(void)
{
    FRESULT    fr;
    FATFS      fatfs;      // Filesystem object
    FIL        fil;        // File object
    UINT       bw;

    // 1) Basic board + UART init
    BoardInit();
    PinMuxConfig();         // Configure SDHost pins: CMD, CLK, DAT0
    InitTerm();             // UART @ 115200 for debug messages
    ClearTerm();

    Message("\n\n\n\r");
    Message("\t***************************************\n\r");
    Message("\t  " APPLICATION_NAME "  \n\r");
    Message("\t         Ver. " APPLICATION_VERSION "\n\r");
    Message("\t***************************************\n\r");
    Message("\n\r");

    // 2) Mount the default drive (drive number = 0, since _VOLUMES=1)
    fr = f_mount(&fatfs, "", 1);
    if (fr != FR_OK) {
        Message("f_mount failed: ");
        Message(f_get_rc_str(fr));
        Message("\n\r");
        while (1);  // Cannot proceed without mounting
    }
    Message(">> f_mount: OK\n\r");

    // 3) Create or overwrite “DATA.CSV” in the card’s root
    fr = f_open(&fil, "DATA.CSV", FA_CREATE_ALWAYS | FA_WRITE);
    if (fr != FR_OK) {
        Message("f_open failed: ");
        Message(f_get_rc_str(fr));
        Message("\n\r");
        while (1);
    }
    Message(">> f_open DATA.CSV: OK\n\r");

    // 4) Write CSV header row
    fr = f_printf(&fil, "Time_ms,SensorA,SensorB\r\n");
    if (fr < 0) {
        Message("f_printf header failed\n\r");
        while (1);
    }
    Message(">> Wrote header\n\r");

    // 5) Write several sample data rows
    //    In a real application, these values would come from sensors or variables
    for (uint32_t t = 0; t < 10; t++) {
        uint32_t time_ms = t * 100;
        float    sensorA = 23.5f + 0.1f * t;
        float    sensorB = 47.2f - 0.2f * t;

        fr = f_printf(&fil, "%lu,%.2f,%.2f\r\n",
                      (unsigned long)time_ms,
                      sensorA,
                      sensorB);
        if (fr < 0) {
            Message("f_printf data row failed\n\r");
            break;
        }

        Report("Row %lu: %lu, %.2f, %.2f\r\n",
               (unsigned long)t,
               (unsigned long)time_ms,
               sensorA,
               sensorB);

        // Toggle LED to show activity (optional)
        GPIO_IF_LedToggle(MCU_GREEN_LED_GPIO);

        // Delay 100 ms between rows (for demonstration)
        UtilsDelay(8000000);
    }

    // 6) Close the file
    fr = f_close(&fil);
    if (fr != FR_OK) {
        Message("f_close failed: ");
        Message(f_get_rc_str(fr));
        Message("\n\r");
        while (1);
    }
    Message(">> f_close: OK\n\r");

    // 7) Optionally unmount (if no further operations needed)
    fr = f_mount(NULL, "", 1);
    if (fr != FR_OK) {
        Message("f_mount(NULL) failed: ");
        Message(f_get_rc_str(fr));
        Message("\n\r");
    } else {
        Message(">> Volume unmounted.\n\r");
    }

    // 8) Done – blink LED forever
    Message("\n\rDone writing DATA.CSV to SD. Blinking LED...\n\r");
    GPIO_IF_LedOff(MCU_ALL_LED_IND);
    GPIO_IF_LedConfigure(LED1|LED2|LED3);
    GPIO_IF_LedOff(MCU_ALL_LED_IND);

    while (1) {
        GPIO_IF_LedToggle(MCU_ORANGE_LED_GPIO);
        UtilsDelay(80000000);
    }

    // Should never reach here
    return 0;
}
